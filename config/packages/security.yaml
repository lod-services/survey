security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                default_target_path: app_dashboard
                always_use_default_target_path: false
                username_parameter: email
                password_parameter: password
            logout:
                path: app_logout
                target: app_login
                invalidate_session: true
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week
                path: /
                always_remember_me: false
                remember_me_parameter: _remember_me

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Allow anonymous access to login, register, and public survey pages
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/register, roles: PUBLIC_ACCESS }
        - { path: ^/password-reset, roles: PUBLIC_ACCESS }
        - { path: ^/survey/public/, roles: PUBLIC_ACCESS }
        - { path: ^/$, roles: PUBLIC_ACCESS }
        
        # Admin routes require ROLE_ADMIN
        - { path: ^/admin, roles: ROLE_ADMIN }
        
        # Survey management requires ROLE_SURVEY_CREATOR or ROLE_ADMIN
        - { path: ^/survey/manage, roles: [ROLE_SURVEY_CREATOR, ROLE_ADMIN] }
        - { path: ^/survey/create, roles: [ROLE_SURVEY_CREATOR, ROLE_ADMIN] }
        - { path: ^/survey/edit, roles: [ROLE_SURVEY_CREATOR, ROLE_ADMIN] }
        
        # User dashboard and profile require authentication
        - { path: ^/dashboard, roles: ROLE_USER }
        - { path: ^/profile, roles: ROLE_USER }
        
        # All other authenticated routes
        - { path: ^/, roles: ROLE_USER }

    role_hierarchy:
        ROLE_SURVEY_CREATOR: ROLE_USER
        ROLE_ADMIN: [ROLE_USER, ROLE_SURVEY_CREATOR]

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to be secure in production, but not important for tests. This reduces
            # the time to run tests and also reduces the time for integration tests
            App\Entity\User:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon